#!/usr/bin/env python

"""
Data plotting program

A simple test program, aiming to plot the data
"""

from __future__ import print_function

__author__ = "LI Kezhi"
__date__ = "$2017-11-25$"
__version__ = "0.1"

import matplotlib
matplotlib.use('TkAgg')

import numpy as np
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
# implement the default mpl key bindings
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure

import sys
if sys.version_info[0] < 3:
    import Tkinter as Tk
else:
    import tkinter as Tk

from FileDialog import LoadFileDialog


root = Tk.Tk()
root.wm_title("Data plotting")


# Default plotting
fig = Figure(figsize=(5, 4), dpi=100)
axe = fig.add_subplot(111)


# a tk.DrawingArea
figWindow = []
canvas = []
toolbar = []
def createFigWindow(fig):
    '''
    A general method to create a new window for plotting
    Input: fig generated by pyplot
    '''
    figWindow.append(Tk.Tk())
    figIndex = len(figWindow)
    figWindow[-1].wm_title('Figure ' + str(figIndex))
    figWindow[-1].geometry('650x500+500+200')  # To avoid unstable size refreshing
    canvas.append(FigureCanvasTkAgg(fig, figWindow[-1]))
    canvas[-1].show()
    canvas[-1].get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

    toolbar.append(NavigationToolbar2TkAgg(canvas[-1], figWindow[-1]))
    toolbar[-1].update()
    canvas[-1]._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

    return figWindow[-1], canvas[-1], toolbar[-1]

# Initial plotting window
axe.text(0.3, 0.5, 'Welcome to use this plotting script!')
createFigWindow(fig)

##### Open files #####
fileLabelFrame = Tk.LabelFrame(root, text='Step 1: Select a data file')
fileLabelFrame.pack(side=Tk.TOP, fill=Tk.X)
filename = Tk.StringVar(root)
def openFile():
    '''
    Open a file for inspection
    Effect: open the file in a new window
    Return: the route of the file
    '''
    global filename
    fd = LoadFileDialog(fileButton)
    filename = fd.go()
    text = open(filename, 'r').read()
    newWindow = Tk.Tk()
    preview = Tk.Text(newWindow, width=80, height=40, wrap=Tk.NONE)
    scrollbarX = Tk.Scrollbar(newWindow, orient=Tk.HORIZONTAL)
    scrollbarY = Tk.Scrollbar(newWindow, orient=Tk.VERTICAL)
    scrollbarX.pack(side=Tk.BOTTOM, fill=Tk.X)
    scrollbarY.pack(side=Tk.RIGHT, fill=Tk.Y)
    preview.config(xscrollcommand=scrollbarX.set)
    preview.config(yscrollcommand=scrollbarY.set)
    scrollbarX.config(command=preview.xview)
    scrollbarY.config(command=preview.yview)
    preview.pack(fill=Tk.BOTH)
    preview.insert(Tk.INSERT, str(text))
fileButton = Tk.Button(fileLabelFrame, text='Open...', command=openFile)
fileButton.pack(side=Tk.LEFT)


##### Plot #####
plotLabelFrame = Tk.LabelFrame(root, text='Step 2: Set plotting paramaters')
plotLabelFrame.pack(side=Tk.TOP, fill=Tk.X)
# Parameter: rows to skip
skipRowsFrame = Tk.Frame(plotLabelFrame)
skipRowsFrame.pack(side=Tk.TOP)
Tk.Label(skipRowsFrame, text='Lines to skip: ').pack(side=Tk.LEFT)
vSkipRows = Tk.IntVar(root)
vSkipRows.set(0)
entrySkipRows = Tk.Entry(skipRowsFrame, textvariable=vSkipRows, width=4)
entrySkipRows.pack(side=Tk.LEFT)

# Parameter: delimiter
delimiterFrame = Tk.Frame(plotLabelFrame)
delimiterFrame.pack(side=Tk.TOP)
Tk.Label(delimiterFrame, text='Delimiter: ').pack(side=Tk.LEFT)
vDelimiter = Tk.StringVar()
r1 = Tk.Radiobutton(delimiterFrame, text="Space/Tab", variable=vDelimiter, value='space')
r2 = Tk.Radiobutton(delimiterFrame, text="Comma", variable=vDelimiter, value='comma')
r1.select()
r2.deselect()
r1.pack(side=Tk.LEFT)
r2.pack(side=Tk.LEFT)

# Parameter: columns to draw
columnFrame = Tk.Frame(plotLabelFrame)
columnFrame.pack(side=Tk.TOP)
Tk.Label(columnFrame, text='Column number of x: ').pack(side=Tk.LEFT)
vColumnX = Tk.IntVar(root)
entryColumnX = Tk.Entry(columnFrame, textvariable=vColumnX, width=4)
vColumnX.set(1)
entryColumnX.pack(side=Tk.LEFT)
Tk.Label(columnFrame, text='Column number of y: ').pack(side=Tk.LEFT)
vColumnY = Tk.IntVar(root)
entryColumnY = Tk.Entry(columnFrame, textvariable=vColumnY, width=4)
vColumnY.set(2)
entryColumnY.pack(side=Tk.LEFT)

# Plot
def plot_data():
    '''
    A general method to plot the figure and create a new window to display
    '''
    # print(filename)
    if vDelimiter.get() == 'space':
        delimiter = None
    elif vDelimiter.get() == 'comma':
        delimiter = ','
    data = np.loadtxt(filename, skiprows=vSkipRows.get(), delimiter=delimiter)
    fig = Figure(figsize=(5, 4), dpi=100)
    axe = fig.add_subplot(111)
    axe.plot(data[:, vColumnX.get()-1], data[:, vColumnY.get()-1])
    figWindowNew, canvasNew, toolbarNew = createFigWindow(fig)
    canvasNew.show()
    toolbarNew.update()
    # canvas._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
    figWindowNew.wm_attributes('-topmost', 1)  # Activate the plotting window

buttonReadData = Tk.Button(root, text='Plot', command=plot_data)
buttonReadData.pack(side=Tk.LEFT)




##########
def on_key_event(event):
    print('you pressed %s' % event.key)
    key_press_handler(event, canvas, toolbar)

canvas[-1].mpl_connect('key_press_event', on_key_event)


def _quit():
    root.quit()     # stops mainloop
    root.destroy()  # this is necessary on Windows to prevent
                    # Fatal Python Error: PyEval_RestoreThread: NULL tstate



button = Tk.Button(root, text='Quit', command=_quit)
button.pack(side=Tk.LEFT)

Tk.mainloop()
# If you put root.destroy() here, it will cause an error if
# the window is closed with the window manager.